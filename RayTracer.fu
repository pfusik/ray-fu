class Vec
{
	double X;
	double Y;
	double Z;
	internal static Vec() Create(double x, double y, double z)
	{
		Vec() result;
		result.X = x;
		result.Y = y;
		result.Z = z;
		return result;
	}
	internal Vec() Add(Vec other) => Create(X + other.X, Y + other.Y, Z + other.Z);
	internal Vec() Sub(Vec other) => Create(X - other.X, Y - other.Y, Z - other.Z);
	internal Vec() Scale(double f) => Create(f * X, f * Y, f * Z);
	internal double Dot(Vec other) => X * other.X + Y * other.Y + Z * other.Z;
	internal Vec() Unitise() => Scale(1 / Math.Sqrt(Dot(this)));
}

class Hit
{
	internal double First;
	internal Sphere? Target;
}

class Ray
{
	internal Vec() Orig = null;
	internal Vec() Dir = null;
}

abstract class Scene
{
	internal abstract void Intersect(Hit! hit, Ray ray);
}

class Sphere : Scene
{
	internal Vec() Center = null;
	double RadiusSquared;

	internal static Sphere# Create(Vec() c, double r)
	{
		Sphere# result = new Sphere();
		result.Center = c;
		result.RadiusSquared = r * r;
		return result;
	}

	internal double RaySphere(Ray ray)
	{
		Vec() v = Center.Sub(ray.Orig);
		double b = v.Dot(ray.Dir);
		double disc = b * b - v.Dot(v) + RadiusSquared;
		if (disc < 0)
			return Math.PositiveInfinity;
		double d = Math.Sqrt(disc);
		double t2 = b + d;
		if (t2 < 0)
			return Math.PositiveInfinity;
		double t1 = b - d;
		return t1 > 0 ? t1 : t2;
	}

	internal override void Intersect(Hit! hit, Ray ray)
	{
		double lambda = RaySphere(ray);
		if (lambda < hit.First) {
			hit.First = lambda;
			hit.Target = this;
		}
	}
}

class Group : Scene
{
	internal Sphere#? Bound;
	internal List<Scene#>() Children;

	internal override void Intersect(Hit! hit, Ray ray)
	{
		double l = Bound.RaySphere(ray);
		if (l < hit.First) {
			foreach (Scene# it in Children)
				it.Intersect(hit, ray);
		}
	}
}

public static class RayTracer
{
	const int N = 512;
	const string PgmHeader = $"P5\n{N} {N}\n255\n";
	public const int PgmLength = PgmHeader.Length + N * N;

	static double RayTrace(Vec light, Ray ray, Scene s)
	{
		Hit() hit;
		hit.First = Math.PositiveInfinity;
		s.Intersect(hit, ray);
		if (Math.IsInfinity(hit.First))
			return 0;
		Vec() point = ray.Orig.Add(ray.Dir.Scale(hit.First));
		Vec() normal = point.Sub(hit.Target.Center).Unitise();
		double g = normal.Dot(light);
		if (g >= 0)
			return 0;
		const double delta = 1.49012e-08;
		Ray() ray2;
		ray2.Orig = point.Add(normal.Scale(delta));
		ray2.Dir = light.Scale(-1);
		hit.First = Math.PositiveInfinity;
		s.Intersect(hit, ray2);
		return Math.IsInfinity(hit.First) ? -g : 0;
	}

	static Scene# Create(int level, Vec() c, double r)
	{
		Scene# s = Sphere.Create(c, r);
		if (level == 1)
			return s;
		Group# group = new Group();
		group.Bound = Sphere.Create(c, 3 * r);
		group.Children.Add(s);
		double rn = 3 * r / Math.Sqrt(12);
		for (int dz = -1; dz <= 1; dz += 2)
			for (int dx = -1; dx <= 1; dx += 2)
				group.Children.Add(Create(level - 1, c.Add(Vec.Create(dx, 1, dz).Scale(rn)), r / 2));
		return group;
	}

	public static void Render(byte[]! pgm, int level = 6)
	{
		const int ss = 4;
		Vec() light = Vec.Create(-1, -3, 2).Unitise();
		Scene# s = Create(level, Vec.Create(0, -1, 0), 1);
		Ray() ray;
		ray.Orig = Vec.Create(0, 0, -4);
		Encoding.UTF8.GetBytes(PgmHeader, pgm, 0);
		int pgmOffset = PgmHeader.Length;
		for (int y = N; --y >= 0; ) {
			for (int x = 0; x < N; x++) {
				double g = 0;
				for (int dx = 0; dx < ss; dx++) {
					for (int dy = 0; dy < ss; dy++) {
						ray.Dir = Vec.Create(x + dx * 1.0 / ss - N / 2, y + dy * 1.0 / ss - N / 2, N).Unitise();
						g += RayTrace(light, ray, s);
					}
				}
				pgm[pgmOffset++] = Math.Truncate(0.5 + 255 * g / (ss * ss));
			}
		}
	}
}
